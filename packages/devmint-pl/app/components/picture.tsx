import { twMerge } from 'tailwind-merge'
import * as v from 'valibot'

export const PictureSchema = v.object({
  image: v.object({
    img: v.object({
      h: v.pipe(v.number(), v.minValue(1)),
      w: v.pipe(v.number(), v.minValue(1)),
      src: v.string(),
    }),
    sources: v.array(
      v.object({
        srcSet: v.string(),
        media: v.optional(v.string()),
        type: v.string(),
      }),
    ),
  }),
  fallback: v.optional(
    v.object({
      lqip: v.string(),
      width: v.pipe(v.number(), v.minValue(1)),
      height: v.pipe(v.number(), v.minValue(1)),
      src: v.string(),
    }),
  ),
})

type PictureProps = v.InferOutput<typeof PictureSchema> & {
  /**
   * Alternative text for the image, used for accessibility.
   */
  alt: string
  /**
   * Additional CSS classes to apply to the <picture> and <img> elements.
   */
  className?: string
}

/**
 * Renders a responsive <picture> element using sources generated by vite-plugin-image-presets.
 *
 * @example
 * import cover from '~/images/photo.jpg?preset=cover'
 *
 * <Picture
 *   alt="A beautiful landscape"
 *   image={cover}
 *   className="rounded-lg shadow"
 * />
 */
export function Picture({ alt, className, image, fallback }: PictureProps) {
  return (
    <picture className={className}>
      {Object.entries(image.sources).map(([type, src]) => (
        <source key={type} media={src.media} srcSet={src.srcSet} type={src.type} />
      ))}
      {!fallback && <img alt={alt} height={image.img.h} src={image.img.src} width={image.img.w} />}
      {fallback && (
        <img
          className={twMerge('bg-cover', className)}
          alt={alt}
          height={fallback.height}
          src={fallback.src}
          style={{ backgroundImage: `url("${fallback.lqip}")` }}
          width={fallback.width}
        />
      )}
    </picture>
  )
}
